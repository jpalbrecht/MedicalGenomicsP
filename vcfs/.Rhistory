source('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
warnings()
source('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
View(som_dp4N)
View(germ)
source('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
View(germ)
View(germ_dp4N)
View(som)
View(som_dp4N)
source('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
source('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
View(germ)
View(som)
View(som_dp4N)
debugSource('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
debugSource('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
debugSource('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
source('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
debugSource('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
tmp = sapply(strsplit(tmp,split = ".")[[1]],as.integer)
debugSource('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
tmp
debugSource('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
tmp
strsplit(tmp,split = ".|,")
strsplit(tmp,".|,")
strsplit(tmp,".")
tmp
strsplit(tmp, ".")
strsplit(tmp, ",")
strsplit(tmp, "\\.")
strsplit(tmp, "\\.|,")
debugSource('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
tmp = data.frame(fRef=tmp[1], rRef=tmp[2], fAlt=tmp[3], rAlt=tmp[4], stringsAsFactors=FALSE, row.names = line)
tmp
debugSource('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
tmp
strsplit(tmp,split = "\\.|,")[[1]]
debugSource('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
tmp
tmp
tmp
source('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
source('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
source('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
View(som_dp4N)
source('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
View(germ_dp4N)
save.image("~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/PurityEstWorkspaceR.RData")
library(HMISC)
library(Hmisc
)
install.packages("Hmisc")
install.packages("numDeriv")
install.packages("~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/ABSOLUTE/ABSOLUTE_1.0.6.tar.gz", repos = NULL, type = "source")
library(ABSOLUTE)
RunAbsolute()
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("foreach")
install.packages("geneplotter")
source("http://www.bioconductor.org/biocLite.R")
install.packages("geneplotter")
source("https://bioconductor.org/biocLite.R")
biocLite("geneplotter")
install.packages("HAPSEG")
install.packages("habseg")
install.packages("HabSeg")
install.packages("~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/ABSOLUTE/HAPSEG_1.1.1.tar.gz", repos = NULL, type = "source")
source("https://bioconductor.org/biocLite.R")
biocLite("DNAcopy")
source('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
result <- PurBayes(Y = as.numeric(som_dp4T$Alt), N =  as.numeric(som_dp4T$Sum) , Z = germ_dp4N$Alt, M = germ_dp4N$Sum)
summary(result)
plot(result)
#result without background correction
resultN <- PurBayes(Y = as.numeric(som_dp4T$Alt), N =  as.numeric(som_dp4T$Sum))
summary(resultN)
plot(resultN)
#Heterogeneous tumor example - 1 subclonal population
#  N.var<-20
#  N<-round(runif(N.var,20,200))
#  lambda.1<-0.75
#  lambda.2<-0.25
#  lambda<-c(rep(lambda.1,10),rep(lambda.2,10))
#  Y<-rbinom(N.var,N,lambda/2)
#  PB.het<-PurBayes(N,Y)
# # summary(PB.het)
#  plot(PB.het)
######## number 2:
### with background correction
mN = sum(germ_dp4N$Alt)/sum(germ_dp4N$Sum)
mT = sum(som_dp4T$Alt)/sum(som_dp4T$Sum)
e = mT/mN
### without background correction
mN = 0.5
mT = sum(som_dp4T$Alt)/sum(som_dp4T$Sum)
purityEstN = mT/mN
purityEstN
## librarys
library(PurBayes)
### functions
extractInfo = function (vcfLine, dp4){
rowN = strsplit(as.character(vcfLine),split = ":")[[1]]
###  DP4 field
tmp = rowN[posDP]
# extract numbers
tmp = sapply(strsplit(tmp,split = "\\.|,")[[1]],as.integer)
# make data frame for the row
tmp = data.frame(fRef=tmp[1], rRef=tmp[2], fAlt=tmp[3], rAlt=tmp[4], stringsAsFactors=FALSE, row.names = line)
# combine data frames
dp4 = rbind.data.frame(dp4,tmp, stringsAsFactors=FALSE)
return(dp4)
}
setwd("/home/phil/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/data/vcfs")
# read DP4 fields
print("Read Data...")
som = read.table("malignant-0.8.snp.Somatic.hc.vcf", stringsAsFactors = F)
germ = read.table("malignant-0.8.snp.Germline.hc.vcf", stringsAsFactors = F)
#
colnames(som) =  c("CHROM","POS","ID","REF","ALT","QUAL","FILTER","INFO","FORMAT","NORMAL","TUMOR")
colnames(germ) =  c("CHROM","POS","ID","REF","ALT","QUAL","FILTER","INFO","FORMAT","NORMAL","TUMOR")
### preprocessing ###
print("Preprocessing...")
# assess DP4 field - assuming format is same for every row and for germline and somatic
if (grepl("DP4",som[,"FORMAT"][1])){
# get position of DP4 field
posDP = grep("DP4" ,strsplit(as.character(som[,"FORMAT"][1]),split = ":")[[1]])
}else{
stop("ERROR: Wrong format!")
}
# assess FREQ field - assuming format is same for every row and for germline and somatic
if (grepl("FREQ",som[,"FORMAT"][1])){
# get position of FREQ field
posFREQ = grep("FREQ" ,strsplit(as.character(som[,"FORMAT"][1]),split = ":")[[1]])
}else{
stop("ERROR: Wrong format!")
}
### initialization ###
#1) forward ref alleles; 2) reverse ref; 3) forward non-ref; 4) reverse non-ref alleles
som_dp4T = data.frame("fRef"=integer(),"rRef"=integer(), "fAlt"=integer(), "rAlt"=integer(), stringsAsFactors=FALSE)
som_dp4N = data.frame("fRef"=integer(),"rRef"=integer(), "fAlt"=integer(), "rAlt"=integer(), stringsAsFactors=FALSE)
som_freqT = c()
som_freqN = c()
germ_dp4T = data.frame("fRef"=integer(),"rRef"=integer(), "fAlt"=integer(), "rAlt"=integer(), stringsAsFactors=FALSE)
germ_dp4N = data.frame("fRef"=integer(),"rRef"=integer(), "fAlt"=integer(), "rAlt"=integer(), stringsAsFactors=FALSE)
germ_freqN = c()
germ_freqT = c()
### processing ###
print("Process somatic input...")
# get info somatic
for (line in 1:nrow(som)) {
if (grepl("DP4",som[,"FORMAT"][line])){
som_dp4N = extractInfo(som[,"NORMAL"][line], som_dp4N)
som_dp4T = extractInfo(som[,"TUMOR"][line], som_dp4T)
### FREQ field tumor
tmp = strsplit(as.character(som[,"TUMOR"][line]),split = ":")[[1]][posFREQ]
# remove %
tmp = as.numeric(gsub("%", "",tmp))
som_freqT = c(som_freqT, tmp)
### FREQ field normal
tmp = strsplit(as.character(som[,"NORMAL"][line]),split = ":")[[1]][posFREQ]
# remove %
tmp = as.numeric(gsub("%", "",tmp))
som_freqN = c(som_freqN, tmp)
}else {
stop("ERROR: Wrong Format!")
}
}
# adding sums of REF and ALT
som_dp4T = cbind(som_dp4T,Ref = som_dp4T$fRef + som_dp4T$rRef, Alt = som_dp4T$fAlt + som_dp4T$rAlt)
som_dp4T = cbind(som_dp4T, Sum = som_dp4T$Ref + som_dp4T$Alt)
som_dp4N = cbind(som_dp4N,Ref = som_dp4N$fRef + som_dp4N$rRef, Alt = som_dp4N$fAlt + som_dp4N$rAlt)
som_dp4N = cbind(som_dp4N, Sum = som_dp4N$Ref + som_dp4N$Alt)
print("Process germline input...")
# get info germline
for (line in 1:nrow(germ)) {
if (grepl("DP4",germ[,"FORMAT"][line])){
germ_dp4N = extractInfo(germ[,"NORMAL"][line], germ_dp4N)
germ_dp4T = extractInfo(germ[,"TUMOR"][line], germ_dp4T)
### FREQ field normal
tmp = strsplit(as.character(germ[,"NORMAL"][line]),split = ":")[[1]][posFREQ]
# remove %
tmp = as.numeric(gsub("%", "",tmp))
germ_freqN = c(germ_freqN, tmp)
### FREQ field tumor
tmp = strsplit(as.character(germ[,"TUMOR"][line]),split = ":")[[1]][posFREQ]
# remove %
tmp = as.numeric(gsub("%", "",tmp))
germ_freqT = c(germ_freqT, tmp)
}else {
stop("ERROR: Wrong Format!")
}
}
warnings()
debugSource('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
tmp
strsplit(as.character(som[,"NORMAL"][line]),split = ":")[[1]][posFREQ]
gsub("%", "",tmp)
as.numeric("0")
debugSource('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
tmp = strsplit(as.character(som[,"TUMOR"][line]),split = ":")[[1]][posFREQ]
tmp
gsub("%", "",tmp)
as.numeric("44,3")
as.numeric("44.3")
debugSource('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
extractInfo(som[,"NORMAL"][line], som_dp4N)
replace("asd,", ",", ".")
replace("asd,", ".", ",")
gsub(",",".", "asd,,,")
x = "24,5%"
debugSource('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
tmp
tmp
debugSource('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
source('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
View(som_dp4N)
warnings()
source('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
debugSource('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
c
source('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
source('~/ownCloud/documents_master/Aktuelle_Fragestellung_MedBio/FinalReport/extractInfo.R')
save.image("test")
plot(result)
result$jags.fits$n_1
result$PB.post
result$which.ref
summary(result)
plot(result)
summary(result)
result <- PurBayes(Y = as.numeric(som_dp4T$Alt), N =  as.numeric(som_dp4T$Sum) , Z = germ_dp4N$Alt, M = germ_dp4N$Sum)
summary(result)
plot(result)
